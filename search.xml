<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>cmake基础语法</title>
    <url>/2024/03/18/tools/cmake%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#CMAKE定义的变量区分大小写,但命令不区分大小写</span></span><br><span class="line"><span class="comment">#CMKAE定义了两个变量： PROJECT_SOURCE_DIR 和 PROJECT_BINARY_DIR</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置cmake的版本</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以通过on/off编译过程的详细信息</span></span><br><span class="line"><span class="keyword">SET</span>( CMAKE_VERBOSE_MAKEFILE <span class="keyword">on</span> ) </span><br><span class="line"></span><br><span class="line"><span class="comment">#设置交叉编译器</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_C_COMPILER <span class="string">&quot;mipsel-openwrt-linux-gcc&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_C_FLAGS <span class="string">&quot;-W -Wall -lpthread&quot;</span>)</span><br><span class="line"><span class="keyword">add_definitions</span>(<span class="string">&quot;-Werror&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置工程名</span></span><br><span class="line"><span class="keyword">project</span>(httpsd)  <span class="comment">#定义了两个变量 demo_BINARY_DIR 和 demo_SOURCE_DIR</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#message 相当于 echo,输出到屏幕</span></span><br><span class="line"><span class="keyword">message</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>) <span class="comment">#CMakeLists.txt所在的文件夹,等价于PROJECT_SOURCE_DIR</span></span><br><span class="line"><span class="keyword">MESSAGE</span>(<span class="variable">$&#123;PROJECT_BINARY_DIR&#125;</span>) <span class="comment">#执行CMakeLists.txt的目录，等价于demo_BINARY_DIR</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置头文件的搜索路径.一般情况下在源文件自己包含便于查找定义</span></span><br><span class="line"><span class="keyword">include_directories</span>(base/<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置库文件路径,一般时target_link_libraries里需要添加的库</span></span><br><span class="line"><span class="keyword">link_directories</span>(base/lib/openssl)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置可执行文件的输出路径</span></span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/output/bin)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用子CMakeLists.txt</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(source/socket) <span class="comment">#添加子CMakeLists.txt的目录，会自动在PROJECT_SOURCE_DIR目录创建一个对应的目录，执行该子CMakeLists.txt</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(source/tls)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(source/http)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置可执行文件的入口</span></span><br><span class="line"><span class="keyword">set</span>(SRC_LIST main.c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成可执行文件</span></span><br><span class="line"><span class="keyword">add_executable</span>(httpsd <span class="variable">$&#123;SRC_LIST&#125;</span>) <span class="comment">#告诉编译器生成一个可执行文件,生成的文件和project同名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#链接库文件</span></span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;====BEGIN LINK LIB====&quot;</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(httpsd http tls crypto ssl socket) <span class="comment">#链接用到的库文件,库文件一般由lib开头，例如 libliblog.a我们使用的时候需要将第一个lib删除</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">install</span>(TARGETS <span class="variable">$&#123;PROJECT_NAME&#125;</span> DESTINATION /home/kaikai/nfsshare/share_03)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="子CMAKE"><a href="#子CMAKE" class="headerlink" title="子CMAKE"></a>子CMAKE</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>(<span class="string">&quot;=====BEGIN MAKE SOCKET LIB=====&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">aux_source_directory</span>(. LIB_SRCS)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置编译的库文件输出目录</span></span><br><span class="line"><span class="keyword">set</span>(LIBRARY_OUTPUT_PATH  <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/output/lib)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(socket <span class="variable">$&#123;LIB_SRCS&#125;</span>) <span class="comment">#告诉编译器生成一个库文件，默认是静态库,生成的文件名会加lib前缀，例如本例生成的库为 libliblog.a ,其他文件使用时需要用 liblog</span></span><br><span class="line"><span class="comment"># add_library(liblog SHARED $&#123;LIB_SRC&#125;) #生成动态库</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tools</category>
        <category>cmake</category>
      </categories>
      <tags>
        <tag>cmake</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言命令行传参</title>
    <url>/2024/08/25/linux/C%E8%AF%AD%E8%A8%80%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BC%A0%E5%8F%82/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h2><p>命令行传参函数原型为<code>int main(int argc, char *argv[])</code>或者<code>int main(int argc, char **argv)</code>，其中<code>argv</code>是参数个数，<code>argv</code>是实际传参。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; argc; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;No.%d parm is %s\n&quot;</span>, i, argv[i]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h3><p>由运行结果可以看到，第一个参数为程序名称，在处理命令行参数的时候要注意从第二个参数开始才是真正需要处理的参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$gcc</span> -o <span class="built_in">test</span> test.c </span><br><span class="line">$./test hello world</span><br><span class="line">No.0 parm is ./test</span><br><span class="line">No.1 parm is hello</span><br><span class="line">No.2 parm is world</span><br></pre></td></tr></table></figure>
<h2 id="命令行参数处理函数"><a href="#命令行参数处理函数" class="headerlink" title="命令行参数处理函数"></a>命令行参数处理函数</h2><p>查询man手册，c语言提供了下面几个命令行参数处理函数，下面给出函数原型和所在头文件。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;getopt.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span> *optarg;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> optind, opterr, optopt;</span><br><span class="line"><span class="type">int</span> <span class="title function_">getopt</span> <span class="params">(<span class="type">int</span> ___argc, <span class="type">char</span> *<span class="type">const</span> *___argv, <span class="type">const</span> <span class="type">char</span> *__shortopts)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">getopt_long</span> <span class="params">(<span class="type">int</span> ___argc, <span class="type">char</span> *__getopt_argv_const *___argv, <span class="type">const</span> <span class="type">char</span> *__shortopts, <span class="type">const</span> <span class="keyword">struct</span> option *__longopts, <span class="type">int</span> *__longind)</span>;</span><br></pre></td></tr></table></figure>
<h3 id="选项列表规则"><a href="#选项列表规则" class="headerlink" title="选项列表规则"></a>选项列表规则</h3><p>例如，<code>+ab:c::</code></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>默认会重新排列参数，将不以’-‘开头的参数移动到参数列表的末尾，’+’告诉函数不要打乱顺序</td>
</tr>
<tr>
<td>单字符’a’</td>
<td>表示选项没有参数</td>
</tr>
<tr>
<td>b:</td>
<td>必须跟一个参数</td>
</tr>
<tr>
<td>c::</td>
<td>可选参数，如果有参数，不能加空格<code>-c100</code>,不能是<code>-c 100</code></td>
</tr>
</tbody></table>
<h3 id="getopt"><a href="#getopt" class="headerlink" title="getopt"></a>getopt</h3><h4 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h4><p>描述：解析短选项命令行参数,例如 <code>-h</code>。无法解析长选项，如<code>--help</code>。<br>参数：<code>argc</code>:参数个数，<code>argv</code>:参数列表，<code>__shortopts</code>:短选项列表<br>返回值：成功返回选项字符，解析完成返回-1.<br>行为：每次调用getopt,如果成功解析到有效选项，会将当前选项的指针赋值给<code>optarg</code>变量，将下一个argv指针的索引赋值给<code>optind</code></p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> opt;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 解析选项</span></span><br><span class="line">    <span class="keyword">while</span> ((opt = getopt(argc, argv, <span class="string">&quot;hv:o:&quot;</span>)) != <span class="number">-1</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (opt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s [-h] [-v] [-o output]\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;v&#x27;</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Verbose mode enabled\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;o&#x27;</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Output file: %s\n&quot;</span>, optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: %s [-h] [-v] [-o output]\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">abort</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印未处理的参数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Remaining arguments:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = optind; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="getopt-long"><a href="#getopt-long" class="headerlink" title="getopt_long"></a>getopt_long</h3><h4 id="函数说明-1"><a href="#函数说明-1" class="headerlink" title="函数说明"></a>函数说明</h4><p>描述：增加长选项参数解析功能。例如<code>--help</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">option</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line">  <span class="comment">/* has_arg can&#x27;t be an enum because some compilers complain about</span></span><br><span class="line"><span class="comment">     type mismatches in all the code that assumes it is an int.  */</span></span><br><span class="line">  <span class="type">int</span> has_arg;</span><br><span class="line">  <span class="type">int</span> *flag;</span><br><span class="line">  <span class="type">int</span> val;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>参数：<code>__longopts</code>：指向 struct option 结构体数组的指针用于定义长选项。<code>__longind</code>：会将长选项的索引存储在这里。这个索引值表示当前处理的长选项在 __longopts 数组中的位置。</p>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;getopt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> opt;</span><br><span class="line">    <span class="type">int</span> option_index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义长选项</span></span><br><span class="line">    <span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">option</span> <span class="title">long_options</span>[] =</span> &#123;</span><br><span class="line">        &#123;<span class="string">&quot;help&quot;</span>,    no_argument,       <span class="literal">NULL</span>, <span class="string">&#x27;h&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;output&quot;</span>,  required_argument, <span class="literal">NULL</span>, <span class="string">&#x27;o&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;verbose&quot;</span>, no_argument,       <span class="literal">NULL</span>, <span class="string">&#x27;v&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,         <span class="number">0</span>,                 <span class="number">0</span>,    <span class="number">0</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析选项</span></span><br><span class="line">    <span class="keyword">while</span> ((opt = getopt_long(argc, argv, <span class="string">&quot;hvo:&quot;</span>, long_options, &amp;option_index)) != <span class="number">-1</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (opt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s [--help] [--verbose] [--output file]\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;v&#x27;</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Verbose mode enabled\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;o&#x27;</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Output file: %s\n&quot;</span>, optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: %s [--help] [--verbose] [--output file]\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">abort</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印未处理的参数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Remaining arguments:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = optind; i &lt; argc; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
        <tag>命令行传参</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言使用syslog</title>
    <url>/2024/04/28/linux/C%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8syslog/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="syslogd和klogd"><a href="#syslogd和klogd" class="headerlink" title="syslogd和klogd"></a>syslogd和klogd</h2><p><code>syslogd</code>是Linux系统日志守护进程，负责接收、记录和分发系统日志，通常配合<code>/etc/syslog.conf</code>使用。<br><code>klogd</code>是Linux内核日志守护进程，符合收集和处理内核信息，通常配合<code>syslogd</code>使用，但是也可以独立使用。</p>
<h3 id="配置文件解析"><a href="#配置文件解析" class="headerlink" title="配置文件解析"></a>配置文件解析</h3><p>配置文件的语法： facility.level action<br>facility: 标识符</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">kern     内核信息，首先通过 klogd 传递； </span><br><span class="line">user     用户进程； </span><br><span class="line">mail     邮件； </span><br><span class="line">daemon   后台进程； </span><br><span class="line">authpriv 授权信息； </span><br><span class="line">syslog   系统日志； </span><br><span class="line">lpr      打印信息； </span><br><span class="line">news     新闻组信息； </span><br><span class="line">uucp     由uucp生成的信息 </span><br><span class="line">cron     计划和任务信息。 </span><br><span class="line">mark     syslog 内部功能用于生成时间戳 </span><br><span class="line">local0~local7   与自定义程序使用</span><br><span class="line">*        通配符代表除了 mark 以外的所有功能</span><br></pre></td></tr></table></figure>
<p>level: 日志等级</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">syslog 级别如下:（按严重程度由高到低的顺序列出了所有可能的优先级。） </span><br><span class="line">emerg 或 panic   该系统不可用（最紧急消息） </span><br><span class="line">alert            需要立即被修改的条件（紧急消息） </span><br><span class="line">crit             阻止某些工具或子系统功能实现的错误条件（重要消息） </span><br><span class="line">err              阻止工具或某些子系统部分功能实现的错误条件（出错消息） </span><br><span class="line">warning          预警信息（警告消息） </span><br><span class="line">notice           具有重要性的普通条件（普通但重要的消息） </span><br><span class="line">info             提供信息的消息（通知性消息） </span><br><span class="line">debug            不包含函数条件或问题的其他信息（调试级-信息量最多） </span><br><span class="line">none             没有重要级，通常用于排错（不记录任何日志消息） </span><br><span class="line">*                所有级别，除了none</span><br></pre></td></tr></table></figure>
<p>action: 动作，一般跟路径，代表保存到该文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user.* /var/log/usr.log <span class="comment">#将user的log，写入usr.log</span></span><br></pre></td></tr></table></figure>
<h2 id="Liunx-C使用syslog"><a href="#Liunx-C使用syslog" class="headerlink" title="Liunx C使用syslog"></a>Liunx C使用syslog</h2><p>在<code>etc/syslog.conf</code>添加<code>local0.* /var/log/test.log</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;syslog.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 打开系统日志</span></span><br><span class="line">    openlog(argv[<span class="number">0</span>], LOG_PID|LOG_CONS, LOG_LOCAL0);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录日志信息</span></span><br><span class="line">    syslog(LOG_INFO, <span class="string">&quot;This is an informational message.&quot;</span>);</span><br><span class="line">    syslog(LOG_WARNING, <span class="string">&quot;This is a warning message.&quot;</span>);</span><br><span class="line">    syslog(LOG_ERR, <span class="string">&quot;This is an error message.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭系统日志</span></span><br><span class="line">    closelog();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
        <category>c</category>
      </categories>
      <tags>
        <tag>syslog</tag>
        <tag>linux-c</tag>
      </tags>
  </entry>
  <entry>
    <title>GIT基础命令</title>
    <url>/2024/03/18/tools/GIT%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;example&quot;</span><br><span class="line">git config --global user.email example</span><br><span class="line">git config --list </span><br><span class="line">ssh-keygen -t rsa -C &quot;example&quot;</span><br></pre></td></tr></table></figure>
<h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone &lt; repo url &gt;</span><br></pre></td></tr></table></figure>
<h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch //列出本地分支</span><br><span class="line">git branch -r //列出远程分支</span><br><span class="line">git branch -a //列出所有分支</span><br><span class="line">git branch test //切换至test分支，确保当前无修改，如果分支不存在则创建分支</span><br><span class="line">git branch -d test //删除test分支</span><br><span class="line">git branch -D test //强制删除test分支</span><br><span class="line">git branch -vv //查看最近一次提交</span><br><span class="line">git branch -m newtest //修改分支名称</span><br><span class="line">git push origin --delete test //删除远程test分支</span><br></pre></td></tr></table></figure>
<h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout filename //放弃单个文件的修改</span><br><span class="line">git checkout . //放弃当前目录的修改</span><br><span class="line">git checkout branchname //切换到branchname分支</span><br><span class="line">git checkout -b test //如果存在切换到test分支，不存在则创建分支并切换到该分支</span><br></pre></td></tr></table></figure>
<h2 id="git-merger-rebase"><a href="#git-merger-rebase" class="headerlink" title="git merger&#x2F;rebase"></a>git merger&#x2F;rebase</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git merge/rebase test //将test分支合并到当前分支</span><br><span class="line">git merge/rebase -m &quot;info&quot; //合并时添加描述</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">区别：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果合并出现冲突的话，解决冲突后git merge需要 git add,git commit，之后merge。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rebase则只需要git add,之后git rebase --<span class="built_in">continue</span>,如果不想解决冲突且不在合并，可以git rebase --abort</span></span><br></pre></td></tr></table></figure>
<h2 id="git-pull-fetch"><a href="#git-pull-fetch" class="headerlink" title="git pull&#x2F;fetch"></a>git pull&#x2F;fetch</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git pull //从远端获取代码合并到本地分支</span><br><span class="line">git fetch //从远程拉取更新不合并</span><br></pre></td></tr></table></figure>
<h2 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git cherry-pick commitId //合并某一次提交</span><br></pre></td></tr></table></figure>

<h2 id="回退远端"><a href="#回退远端" class="headerlink" title="回退远端"></a>回退远端</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin HEAD --force</span><br></pre></td></tr></table></figure>

<h2 id="图形界面"><a href="#图形界面" class="headerlink" title="图形界面"></a>图形界面</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitk</span><br></pre></td></tr></table></figure>

<h2 id="tags"><a href="#tags" class="headerlink" title="tags"></a>tags</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git tag -a &lt;ver&gt; &lt;commit id&gt; -m &quot;备注&quot; #指定commit id新增tag</span><br><span class="line">git push --tags #推送所有tag到远端</span><br><span class="line">git push origin tagname #推送单个tag</span><br><span class="line">git tag -d tagname #删除本地tag</span><br><span class="line">git push origin :refs/tags/tagname #删除远端tag</span><br></pre></td></tr></table></figure>

<h2 id="本地仓库推送到远端"><a href="#本地仓库推送到远端" class="headerlink" title="本地仓库推送到远端"></a>本地仓库推送到远端</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">github新建仓库，拿到地址</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">git remote add origin &lt; repo url &gt;</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">git push --set-upstream origin master</span></span><br></pre></td></tr></table></figure>

<h2 id="git-clean-清除文件"><a href="#git-clean-清除文件" class="headerlink" title="git clean 清除文件"></a>git clean 清除文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clean -n [path] #显示path目录下会被删除的文件，但是不会显示文件夹</span><br><span class="line">git clean -f [path] #删除当前目录的新增文件，但是不会删除文件夹</span><br><span class="line">git clean -df #删除当前目录新增文件，包括文件夹</span><br><span class="line">git clean -xdf #删除新增，包括gitignore</span><br></pre></td></tr></table></figure>

<h2 id="修改注释"><a href="#修改注释" class="headerlink" title="修改注释"></a>修改注释</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存退出</span></span><br><span class="line">ctrl+x </span><br><span class="line">enter</span><br></pre></td></tr></table></figure>

<h2 id="同步子仓库"><a href="#同步子仓库" class="headerlink" title="同步子仓库"></a>同步子仓库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git submodule update --init</span><br></pre></td></tr></table></figure>

<h2 id="应用patch"><a href="#应用patch" class="headerlink" title="应用patch"></a>应用patch</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 进入需要更新的目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 执行命令，-p指忽略的目录层级，-p 1指忽略第一层目录</span></span><br><span class="line">cat ~/test.patch | patch -p 1</span><br></pre></td></tr></table></figure>

<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global http.sslverify false</span><br><span class="line">git config --global https.sslverify false</span><br><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure>

<h2 id="CRLF"><a href="#CRLF" class="headerlink" title="CRLF"></a>CRLF</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config core.autocrlf input</span><br></pre></td></tr></table></figure>

<h2 id="git-revert-撤销某个commit的修改"><a href="#git-revert-撤销某个commit的修改" class="headerlink" title="git revert 撤销某个commit的修改"></a>git revert 撤销某个commit的修改</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git revert &lt;commit-hash&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>tools</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux性能分析-CPU</title>
    <url>/2024/05/08/linux/Linux%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90-CPU/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>linux</category>
        <category>性能分析</category>
      </categories>
      <tags>
        <tag>Linux性能</tag>
        <tag>CPU</tag>
      </tags>
  </entry>
  <entry>
    <title>音频编解码</title>
    <url>/2024/03/20/wiki/%E9%9F%B3%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="PCM-脉冲编码调制（PulseCodeModulation）"><a href="#PCM-脉冲编码调制（PulseCodeModulation）" class="headerlink" title="PCM - 脉冲编码调制（PulseCodeModulation）"></a>PCM - 脉冲编码调制（PulseCodeModulation）</h2><p>奈克斯特-香农采样定理：采样频率大于2倍的最大频率，才能最大限度的还原出模拟信号。<br>PCM是一种数字音频编码方式，用于将模拟信号转换为数字信号。在PCM编码中，模拟信号按照一定的采样频率进行采样，并通过量化和编码转换为数字信号。PCM数据可以直接送进DAC进行播放。</p>
<h2 id="音频参数"><a href="#音频参数" class="headerlink" title="音频参数"></a>音频参数</h2><ol>
<li><p>采样率（Sample Rate）：采样率是指每秒钟对声音信号的采样次数，以赫兹（Hz）为单位。常见的采样率包括 44.1kHz（CD音质）、48kHz（DVD、蓝光音质）、96kHz（高清音质）等。采样率越高，能够记录的声音频率范围也就越宽，音质也就更好，但相应的文件大小也会增加。</p>
</li>
<li><p>位深度（Bit Depth）：位深度表示每个样本的量化精度，通常以比特（bit）为单位。常见的位深度包括 16位、24位和32位浮点数。位深度越高，可以表示的动态范围就越大，音频的细节表现也更丰富，但文件大小也随之增加。</p>
</li>
</ol>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/381093568?ivk_sa=1024320u&utm_id=0">什么是位深度</a></li>
</ul>
<ol start="3">
<li><p>声道数（Channels）：声道数表示音频文件中包含的独立声道数量，常见的有单声道（mono）和双声道（stereo）。多声道音频可以更准确地定位声音来源，实现环绕音效等，但同时也会增加文件大小。</p>
</li>
<li><p>编码格式（Codec Format）：编码格式决定了音频数据的压缩方式和解码规则，常见的包括MP3、AAC、WAV、FLAC、OPUS等。不同的编码格式具有不同的压缩率和音质表现，选择合适的编码格式可以根据具体的应用需求和存储&#x2F;传输资源进行权衡。</p>
</li>
</ol>
<h2 id="编解码"><a href="#编解码" class="headerlink" title="编解码"></a>编解码</h2><p>编码一般情况都是由原始的PCM数据编码成其他数据，解码反之。</p>
<h3 id="WAV编码"><a href="#WAV编码" class="headerlink" title="WAV编码"></a>WAV编码</h3><h3 id="WAV解码"><a href="#WAV解码" class="headerlink" title="WAV解码"></a>WAV解码</h3><h3 id="G711编码"><a href="#G711编码" class="headerlink" title="G711编码"></a>G711编码</h3><h3 id="G711解码"><a href="#G711解码" class="headerlink" title="G711解码"></a>G711解码</h3><h3 id="OPUS编码"><a href="#OPUS编码" class="headerlink" title="OPUS编码"></a>OPUS编码</h3><h3 id="OPUS解码"><a href="#OPUS解码" class="headerlink" title="OPUS解码"></a>OPUS解码</h3>]]></content>
      <categories>
        <category>wiki</category>
        <category>video-audio</category>
      </categories>
      <tags>
        <tag>音视频相关</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux性能分析-网络</title>
    <url>/2024/05/08/linux/Linux%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90-%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="资源受限Linux环境-iperf3-udp打流丢包解决方案"><a href="#资源受限Linux环境-iperf3-udp打流丢包解决方案" class="headerlink" title="资源受限Linux环境 iperf3 udp打流丢包解决方案"></a>资源受限Linux环境 iperf3 udp打流丢包解决方案</h2><ol>
<li>方案一：调整程序优先级<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nice -n 20 your_program &amp;</span><br><span class="line">nice -n -20 iperfs -c your_ip  -t 60 -u -b 100M -R</span><br></pre></td></tr></table></figure></li>
<li>方案二：修改发送、接收缓冲区buffer<br>缓冲区buffer调整到2MB<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2M</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> 2097152 &gt; /proc/sys/net/core/rmem_default</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> 2097152 &gt; /proc/sys/net/core/rmem_max</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> 2097152 &gt; /proc/sys/net/core/wmem_default</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> 2097152 &gt; /proc/sys/net/core/wmem_max</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
        <category>性能分析</category>
      </categories>
      <tags>
        <tag>Linux性能</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux性能分析-内存</title>
    <url>/2024/05/08/linux/Linux%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>linux</category>
        <category>性能分析</category>
      </categories>
      <tags>
        <tag>Linux性能</tag>
        <tag>内存</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu交叉编译环境配置</title>
    <url>/2024/03/25/linux/Ubuntu%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p><em>下面是arm&#x2F;mips在ubuntu 22.04上常用的依赖项</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update </span><br><span class="line">sudo apt-get install gcc g++ binutils patch bzip2 flex bison make autoconf gettext texinfo unzip sharutils subversion libncurses5-dev ncurses-term zlib1g-dev subversion git-core gawk asciidoc libz-dev zlib1g-dev libssl-dev pkg-config unzip zlib1g-dev libc6-dev libncurses5-dev gawk sharutils curl libxml-parser-perl ocaml-nox ocaml ocaml-findlib libssl-dev libfdt-dev quilt device-tree-compiler u-boot-tools lsb-core lib32z1 cmake mtd-utils python2 python3-pip cryptsetup-bin</span><br><span class="line">curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py</span><br><span class="line">sudo python2 get-pip.py</span><br><span class="line">pip2 install pycryptodome</span><br></pre></td></tr></table></figure>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>获取你需要使用的交叉编译工具链，然后将工具链的bin目录添加到环境变量里</p>
<ol>
<li><code>$ vim ~/.bashrc</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:path/to/bin <span class="comment">#path/to记得修改为真正的目录，如果有多个工具链，可以用 &#x27;:&#x27;隔开，也可以另起一行</span></span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">&#x27;$(date +%H:%M:%S) \[\033[01;33m\]\W\[\033[36m\] $&#x27;</span> <span class="comment">#可选项，修改后终端提示符显示：时间+当前目录+$ （14:37:31 ~ $）</span></span><br></pre></td></tr></table></figure></li>
<li><code>$ source ~/.bashrc</code><br>这个命令使上面的修改立即生效</li>
<li>检查环境变量是否生效<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#假设你的工具链是arm-linux-</span></span><br><span class="line">$ arm-linux-gcc -v <span class="comment">#执行这个命令，如果有版本号的回显，说明工具链已成功添加到环境变量</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="其他个性化配置"><a href="#其他个性化配置" class="headerlink" title="其他个性化配置"></a>其他个性化配置</h2><h3 id="虚拟机开机自动挂载共享文件夹"><a href="#虚拟机开机自动挂载共享文件夹" class="headerlink" title="虚拟机开机自动挂载共享文件夹"></a>虚拟机开机自动挂载共享文件夹</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vim /ext/fstab</span><br><span class="line">.host:/share /mnt/hgfs fuse.vmhgfs-fuse allow_other,defaults 0 0</span><br></pre></td></tr></table></figure>
<h3 id="安装ssh-server"><a href="#安装ssh-server" class="headerlink" title="安装ssh&#x3D;server"></a>安装ssh&#x3D;server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br><span class="line">sudo systemctl status ssh</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> ssh</span><br></pre></td></tr></table></figure>
<h3 id="windows-ssh免密登录"><a href="#windows-ssh免密登录" class="headerlink" title="windows ssh免密登录"></a>windows ssh免密登录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> windows/path/id_isa.pub &gt;&gt; ubuntu/~/.ssh/authorized_keys <span class="comment">#指将windows下的key复制到ubuntu目录下</span></span><br></pre></td></tr></table></figure>
<h3 id="安装nfs-server"><a href="#安装nfs-server" class="headerlink" title="安装nfs-server"></a>安装nfs-server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">sudo apt install nfs-kernel-server</span><br><span class="line">sudo <span class="built_in">mkdir</span> /nfsroot</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/home/kaikai/nfsshare  *(rw,sync,no_root_squash)&quot;</span> &gt;&gt; /etc/exports</span><br><span class="line"><span class="comment"># /nfsroot：指定/nfsroot为nfs服务器的共享目录</span></span><br><span class="line"><span class="comment"># *：允许所有的网段访问，也可以使用具体的IP</span></span><br><span class="line"><span class="comment"># rw：挂接此目录的客户端对该共享目录具有读写权限</span></span><br><span class="line"><span class="comment"># sync：资料同步写入内存和硬盘</span></span><br><span class="line"><span class="comment"># no_root_squash：root用户具有对根目录的完全管理访问权限</span></span><br><span class="line"><span class="comment"># no_subtree_check：不检查父目录的权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重启服务</span></span><br><span class="line">sudo service nfs-kernel-server restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查共享目录</span></span><br><span class="line">showmount -e localhost</span><br><span class="line"></span><br><span class="line"><span class="comment">#客户端挂载</span></span><br><span class="line">mount -t nfs -o nolock 192.168.2.183:/nfsroot /nfsroot</span><br><span class="line">-t：挂载的文件系统类型</span><br><span class="line">-o nolock：不要文件锁</span><br><span class="line">192.168.xxx.xxx:/nfsroot：nfs服务器ip:服务器共享目录</span><br><span class="line">nfsroot：客户端已存在的目录</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
        <category>交叉编译</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>交叉编译</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统时区设置</title>
    <url>/2024/03/20/linux/Linux%E7%B3%BB%E7%BB%9F%E6%97%B6%E5%8C%BA%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="UTC、GMT、CST、DST以及Unix时间戳"><a href="#UTC、GMT、CST、DST以及Unix时间戳" class="headerlink" title="UTC、GMT、CST、DST以及Unix时间戳"></a>UTC、GMT、CST、DST以及Unix时间戳</h2><h3 id="UTC-时间标准时间"><a href="#UTC-时间标准时间" class="headerlink" title="UTC - 时间标准时间"></a>UTC - 时间标准时间</h3><p>  全球通用的时间标准，是一堆大佬根据原子钟和地球自转计算出来的。</p>
<h3 id="GMT-格林威治时间"><a href="#GMT-格林威治时间" class="headerlink" title="GMT - 格林威治时间"></a>GMT - 格林威治时间</h3><p>  规定太阳每天经过位于英国伦敦郊区的皇家格林威治天文台的时间为中午12点。</p>
<p><em>GMT是前世界标准时，UTC是现世界标准时。UTC以原子时计时所以比GMT更精确，但是日常生活中精确到秒的情况下，二者可以视为相同</em></p>
<h3 id="CST-Central-Standard-Time"><a href="#CST-Central-Standard-Time" class="headerlink" title="CST - Central Standard Time"></a>CST - Central Standard Time</h3><p>  可同时代表4个时区:美国中部、澳大利亚、中国和古巴。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Central Standard Time (USA) UT-6:00</span><br><span class="line">Central Standard Time (Australia) UT 9:30</span><br><span class="line">China Standard Time UT 8:00</span><br><span class="line">Cuba Standard Time UT-4:00</span><br></pre></td></tr></table></figure>
<h3 id="DST-夏令时"><a href="#DST-夏令时" class="headerlink" title="DST - 夏令时"></a>DST - 夏令时</h3><p>  为了节约能源，提高日光利用率，夏季太阳升起较早人为将时间调快一个小时，夏令时切换当天一天只有23个小时，同时冬令时切换当天，一天有25个小时</p>
<h3 id="Unix时间戳"><a href="#Unix时间戳" class="headerlink" title="Unix时间戳"></a>Unix时间戳</h3><p>  UNIX时间戳是UTC时间，从1970年01月01日00时00分00秒到现在的总秒数，与时区无关。</p>
<h2 id="Linux时间函数"><a href="#Linux时间函数" class="headerlink" title="Linux时间函数"></a>Linux时间函数</h2><h3 id="精确到秒"><a href="#精确到秒" class="headerlink" title="精确到秒"></a>精确到秒</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> tm_sec;</span><br><span class="line">	<span class="type">int</span> tm_min;</span><br><span class="line">	<span class="type">int</span> tm_hour;</span><br><span class="line">	<span class="type">int</span> tm_mday;</span><br><span class="line">	<span class="type">int</span> tm_mon;</span><br><span class="line">	<span class="type">int</span> tm_year;</span><br><span class="line">	<span class="type">int</span> tm_wday;</span><br><span class="line">	<span class="type">int</span> tm_yday;</span><br><span class="line">	<span class="type">int</span> tm_isdst;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="type">time_t</span> <span class="title function_">time</span><span class="params">(<span class="type">time_t</span> *timer)</span>; <span class="comment">//返回unix时间戳，如果传参不为空，则返回值也报错在参数里，以秒为单位</span></span><br><span class="line"><span class="type">time_t</span> <span class="title function_">stime</span><span class="params">(<span class="type">time_t</span> *timer)</span>;  <span class="comment">//设置系统时间</span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">ctime</span><span class="params">(<span class="type">const</span> <span class="type">time_t</span> *timer)</span>; <span class="comment">//将unix时间戳转换为字符串，格式： 星期 月 日 小时:分:秒 年</span></span><br><span class="line"><span class="keyword">struct</span> tm *<span class="title function_">localtime</span><span class="params">(<span class="type">const</span> <span class="type">time_t</span> *timer)</span>; <span class="comment">//将unix时间戳填充到tm结构体中</span></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">strftime</span><span class="params">(<span class="type">char</span> *str, <span class="type">size_t</span> maxsize, <span class="type">const</span> <span class="type">char</span> *format, <span class="type">const</span> <span class="keyword">struct</span> tm *timeptr)</span>； <span class="comment">//将tm结构体按照指定格式保存到str</span></span><br></pre></td></tr></table></figure>
<h3 id="精确到毫秒"><a href="#精确到毫秒" class="headerlink" title="精确到毫秒"></a>精确到毫秒</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span>&#123;</span></span><br><span class="line">    <span class="type">long</span>  tv_sec; <span class="comment">// 秒数</span></span><br><span class="line">    <span class="type">long</span>  tv_usec; <span class="comment">// 微秒数</span></span><br><span class="line">&#125;；</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timezone</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> tz_minuteswest;<span class="comment">//GMT往西方的小时数，一般配合tzset函数使用</span></span><br><span class="line">    <span class="type">int</span> tz_dsttime;<span class="comment">//夏令时</span></span><br><span class="line">&#125;；</span><br><span class="line"><span class="type">int</span> <span class="title function_">gettimeofday</span><span class="params">(<span class="keyword">struct</span> timeval *tv,<span class="keyword">struct</span> timezone *tz)</span>; <span class="comment">//获取时间和时区信息</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">settimeofday</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> timeval *tv, <span class="type">const</span> <span class="keyword">struct</span> timezone *tz)</span>;  <span class="comment">//设置时间和时区信息</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">daylight：整数全局变量，用于表示当前时区是否遵循夏令时（Daylight Saving Time）。如果 daylight 的值为非零，则表示当前时区遵循夏令时规则，否则为零。</span></span><br><span class="line"><span class="comment">timezone：长整型全局变量，用于表示当前时区与 Coordinated Universal Time（UTC）之间的偏移量，单位为秒。它表示当前时区相对于 UTC 的时间差，包括夏令时调整。</span></span><br><span class="line"><span class="comment">tzname：字符数组，用于存储时区的标准名称和夏令时名称。通常 tzname[0] 存储标准时区名称，tzname[1] 存储夏令时时区名称。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">tzset</span><span class="params">(<span class="type">void</span>)</span>; <span class="comment">//给daylight,timezone和tzname三个全局变量赋值。</span></span><br></pre></td></tr></table></figure>
<h2 id="设置时区"><a href="#设置时区" class="headerlink" title="设置时区"></a>设置时区</h2><p>  规定地理位置相对于GMT以西为+，以东为-，东八区：GMT-8。</p>
<h3 id="TZ环境变量取值规则"><a href="#TZ环境变量取值规则" class="headerlink" title="TZ环境变量取值规则"></a>TZ环境变量取值规则</h3><p>参考该文章即可：</p>
<ul>
<li><a href="https://blog.csdn.net/zhongmushu/article/details/103988051">TZ取值规则</a><br>当TZ取值为时区名时，对应的zoneinfo文件必须存在，如果zoneinfo不在默认路径，可以使用<code>TZDIR</code>环境变量配置</li>
</ul>
<h3 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h3><ol>
<li>通过设置环境变量<br><code>export TZ=GMT-8</code></li>
<li>通过文件<code>etc/TZ</code><br><code>echo &quot;Asia/Shanghai&quot; &gt; /etc/TZ</code><br><em>注意：环境变量优先于文件</em></li>
<li>进程内部设置<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">setenv</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name, <span class="type">const</span> <span class="type">char</span> *value, <span class="type">int</span> overwrite)</span>; <span class="comment">//设置环境变量，仅对当前进程有效 setenv(&quot;TZ&quot;,&quot;GMT-8&quot;,1);</span></span><br></pre></td></tr></table></figure></li>
<li>zoneinfo</li>
</ol>
<ul>
<li><a href="https://www.cnblogs.com/J-YANG/p/14822231.html">如何用Buildroot增加zoneinfo并修改时区</a></li>
</ul>
<p>Linux系统中的时区信息存储在<code>/etc/localtime</code>文件中，该文件是一个符号链接，指向实际的时区文件。这些时区文件通常位于<code>usr/share/zoneinfo</code>目录下，每个时区对应一个文件，文件名以所在地区的缩写命名，如<code>Asia/Shanghai</code>表示美国纽约时区。<br><code>zoneinfo</code>是linx系统中用于管理时区信息的数据库.它包含了世界上各个时区的详细信息，包括时区名称、夏令时规则等。当系统启动时，它会读取&#x2F;etc&#x2F;localtime文件来获取当前系统的时区设置，然后根据这个设置去Zoneinfo数据库中查找对应的时区信息。</p>
<h2 id="Linux-C设置时区"><a href="#Linux-C设置时区" class="headerlink" title="Linux C设置时区"></a>Linux C设置时区</h2><p>该方法仅对当前程序生效</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">mian</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">timezone</span> <span class="title">tz</span>;</span></span><br><span class="line">  <span class="type">char</span> cmd[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  gettimeofday(&amp;tv,&amp;tz);</span><br><span class="line">  setenv(<span class="string">&quot;TZDIR&quot;</span>, <span class="string">&quot;/system/usr/share/zoneinfo&quot;</span>, <span class="number">1</span>);</span><br><span class="line">  setenv(<span class="string">&quot;TZ&quot;</span>, <span class="string">&quot;Asia/Shanghai&quot;</span>, <span class="number">1</span>);</span><br><span class="line">  tzset();</span><br><span class="line">  tz.tz_minuteswest = <span class="number">0</span>;</span><br><span class="line">  tz.tz_dsttime = <span class="number">0</span>;</span><br><span class="line">  settimeofday(<span class="literal">NULL</span>,&amp;tz);</span><br><span class="line">  tz.tz_minuteswest = timezone/<span class="number">60</span>;</span><br><span class="line">  settimeofday(<span class="literal">NULL</span>,&amp;tz);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
        <category>c</category>
      </categories>
      <tags>
        <tag>Linux设置</tag>
        <tag>TZ</tag>
      </tags>
  </entry>
  <entry>
    <title>1.从零开始学Linux内核源码 - 源码下载及配置编译</title>
    <url>/2024/03/30/linux/kernel/1.%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6Linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><em>所有操作均是linux-6.8.2版本</em></p>
<h2 id="kernel源码下载"><a href="#kernel源码下载" class="headerlink" title="kernel源码下载"></a>kernel源码下载</h2><ul>
<li><a href="https://www.kernel.org/">官方网站</a></li>
<li><a href="https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.8.2.tar.xz">linux-6.8.2</a></li>
</ul>
<h2 id="kernel目录结构"><a href="#kernel目录结构" class="headerlink" title="kernel目录结构"></a>kernel目录结构</h2><p><img src="/img/kernel/linux-6.8.2%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="Linux-6.8.2一级目录"></p>
<h3 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h3><table>
<thead>
<tr>
<th>目录</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>arch</td>
<td>包含了各种不同的CPU体系架构的代码，如果ARM、x86、MIPS等</td>
</tr>
<tr>
<td>block</td>
<td>包含块设备相关的代码</td>
</tr>
<tr>
<td>crets</td>
<td>包含了用于签名和验证内核模块的证书文件和工具</td>
</tr>
<tr>
<td>crypto</td>
<td>包含加密相关的代码</td>
</tr>
<tr>
<td>Documentation</td>
<td>包含了内核的文档，包括各种文档、注释和帮助文件</td>
</tr>
<tr>
<td>drivers</td>
<td>含了设备驱动程序的源代码，如输入输出设备、网络设备等</td>
</tr>
<tr>
<td>fs</td>
<td>包含了文件系统相关的代码，如 ext4、NTFS、FAT 等</td>
</tr>
<tr>
<td>include</td>
<td>包含了一些头文件，用于引入定义和声明</td>
</tr>
<tr>
<td>init</td>
<td>包含了启动和初始化代码</td>
</tr>
<tr>
<td>io_uring</td>
<td>包含了与 io_uring 框架相关的代码</td>
</tr>
<tr>
<td>ipc</td>
<td>包含了进程间通信相关的代码</td>
</tr>
<tr>
<td>kernel</td>
<td>包含了内核的核心代码</td>
</tr>
<tr>
<td>lib</td>
<td>包含了一些通用的函数库</td>
</tr>
<tr>
<td>mm</td>
<td>包含了内存管理相关的代码</td>
</tr>
<tr>
<td>net</td>
<td>包含了网络协议栈相关的代码</td>
</tr>
<tr>
<td>rust</td>
<td>引入了一些rust特性</td>
</tr>
<tr>
<td>samples</td>
<td>包含了一些示例代码</td>
</tr>
<tr>
<td>scripts</td>
<td>包含了一些辅助脚本，用于构建和维护内核</td>
</tr>
<tr>
<td>security</td>
<td>包含了安全子系统相关的代码</td>
</tr>
<tr>
<td>sound</td>
<td>包含了声音子系统相关的代码</td>
</tr>
<tr>
<td>tools</td>
<td>包含了一些工具，用于辅助内核开发和调试</td>
</tr>
<tr>
<td>usr</td>
<td>包含了用户空间工具和库，这些工具和库通常用于与内核交互</td>
</tr>
<tr>
<td>virt</td>
<td>包含了虚拟化相关的代码</td>
</tr>
</tbody></table>
<h3 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h3><table>
<thead>
<tr>
<th>文件</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>COPYING</td>
<td>包含了许可证信息</td>
</tr>
<tr>
<td>CREDITS</td>
<td>包含了对 Linux 内核贡献者的致谢</td>
</tr>
<tr>
<td>Kbuild</td>
<td>用于管理内核源代码的编译和构建过程</td>
</tr>
<tr>
<td>Kconfig</td>
<td>用于配置内核编译时的各种选项和特性</td>
</tr>
<tr>
<td>MAINTAINERS</td>
<td>包含了 Linux 内核的维护者列表</td>
</tr>
<tr>
<td>Makefile</td>
<td>系统编译和构建脚本</td>
</tr>
<tr>
<td>README</td>
<td>从入门到入土😭</td>
</tr>
</tbody></table>
<h2 id="README"><a href="#README" class="headerlink" title="README"></a>README</h2><p>提供了两个非常重要的信息：</p>
<ol>
<li><a href="https://www.kernel.org/doc/html/latest/admin-guide/README.html">Documentation&#x2F;admin-guide&#x2F;README.rst</a> :什么是Linux以及如何编译和配置他？</li>
<li><a href="https://www.kernel.org/doc/html/latest/process/changes.html#changes">Documentation&#x2F;process&#x2F;changes.rst</a> ：编译内核的最小配置？编译遇到错误，参考该文章</li>
</ol>
<h3 id="安装内核"><a href="#安装内核" class="headerlink" title="安装内核"></a>安装内核</h3><h4 id="首次安装"><a href="#首次安装" class="headerlink" title="首次安装"></a>首次安装</h4><p>使用下面的命令：该命令是将文件提取并解压到当前文件夹，当然也可以选择其他的解压方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xz -<span class="built_in">cd</span> linux-6.8.2.tar.xz | tar xvf -</span><br></pre></td></tr></table></figure>
<h4 id="更新patch"><a href="#更新patch" class="headerlink" title="更新patch"></a>更新patch</h4><p>在linux内核源码的根目录执行下面的命令:<code>/path/to</code>是patch所在目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xz -<span class="built_in">cd</span> /path/to/patch-6.x.xz | patch -p1</span><br></pre></td></tr></table></figure>
<p>或者使用<code>scripts/patch-kernel</code>脚本自动升级patch</p>
<h3 id="配置并编译内核"><a href="#配置并编译内核" class="headerlink" title="配置并编译内核"></a>配置并编译内核</h3><p>可以通过<code>make O=output/dir</code>设置编译目录和输出目录。如果没有配置目录，则编译的临时文件都将在源码的根目录产生。如果使用了参数，后续执行的命令建议都带着参数使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> linux-6.8.2</span><br><span class="line">make O=./output</span><br></pre></td></tr></table></figure>
<h4 id="内核配置"><a href="#内核配置" class="headerlink" title="内核配置"></a>内核配置</h4><p>可以通过<code>make menuconfig</code>命令调用图形配置界面配置内核，当然也支持其他的方法修改配置,可以使用<code>make help</code>查看更多的选项。<br>如下图：方向键控制选项，<code>ENTER</code>键进入子菜单，<code>space</code>空格键更改编译方式，保存后会将修改后的配置保存到<code>.config</code>文件里：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[ ]: 不编译</span><br><span class="line">[*]: 编译进内核</span><br><span class="line">&lt; &gt;: 不编译</span><br><span class="line">&lt;*&gt;: 编译进内核</span><br><span class="line">&lt;M&gt;: 以可加载的形式编译</span><br></pre></td></tr></table></figure>
<p>使用默认配置文件，根据当前操作架构作为默认配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make O=./output defconfig</span><br></pre></td></tr></table></figure>
<p><img src="/img/kernel/menuconfig.png" alt="menuconfig"></p>
<h4 id="内核编译"><a href="#内核编译" class="headerlink" title="内核编译"></a>内核编译</h4><p>执行下面的命令，编译过程生成的中间产物，和最终产物都会在当前目录的output目录下产生：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make O=./output</span><br></pre></td></tr></table></figure>
<p>最终编译的kernel在<code>./output/arch/x86_64/boot/bzImage</code></p>
<h4 id="内核Makefile常用的命令行参数"><a href="#内核Makefile常用的命令行参数" class="headerlink" title="内核Makefile常用的命令行参数"></a>内核Makefile常用的命令行参数</h4><table>
<thead>
<tr>
<th>参数</th>
<th>使用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ARCH</td>
<td>make ARCH&#x3D;arm</td>
<td>指定目标架构，如x86、ARM等，该架构代码必须在arch文件夹中存在</td>
</tr>
<tr>
<td>CROSS_COMPILE</td>
<td>make CROSS_COMPILE&#x3D;arm-linux-gnueabi-</td>
<td>指定编译使用的交叉工具链前缀</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>linux</category>
        <category>kernel</category>
      </categories>
      <tags>
        <tag>kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>HEXO搭建个人博客</title>
    <url>/2024/03/17/tools/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="推荐使用butterfly主题"><a href="#推荐使用butterfly主题" class="headerlink" title="推荐使用butterfly主题"></a>推荐使用butterfly主题</h2><p>*作者提供了非常棒的说明文档，点击链接立刻开始搭建你自己的小站吧<br><a href="https://butterfly.js.org/">主题链接</a></p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="hexo-generate"><a href="#hexo-generate" class="headerlink" title="hexo generate"></a>hexo generate</h3><p>构建静态网站</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> hexo g</span><br></pre></td></tr></table></figure>
<h3 id="hexo-deploy"><a href="#hexo-deploy" class="headerlink" title="hexo deploy"></a>hexo deploy</h3><p>一键部署到GITHUB PAGE，参考<a href="https://hexo.io/zh-cn/docs/one-command-deployment">HEXO官方文档链接</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> hexo deploy</span><br></pre></td></tr></table></figure>
<h3 id="hexo-n-p-dir-title"><a href="#hexo-n-p-dir-title" class="headerlink" title="hexo n -p dir&#x2F;title"></a>hexo n -p dir&#x2F;title</h3><p>新增文章到指定文件夹，该文件夹的根目录为<code>source/_posts/</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> hexo n <span class="literal">-p</span> study/hexo/HEXO搭建个人博客</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tools</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>butterfly</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu交叉编译Bluez</title>
    <url>/2024/08/07/linux/Ubuntu%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91Bluez/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>  <em>交叉编译均在Ubuntu 22.04环境操作</em></p>
<h2 id="交叉编译前准备"><a href="#交叉编译前准备" class="headerlink" title="交叉编译前准备"></a>交叉编译前准备</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>  <em>由于bluez编译过程中依赖项比较多，所以创建一个文件夹，作为编译目录，文件目录结构如下</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bluez-cross-complier/</span><br><span class="line">├── download     <span class="comment">#源码下载在此处操作</span></span><br><span class="line">└── output       <span class="comment">#编译产物输出到此目录</span></span><br><span class="line">└── source-code  <span class="comment">#源码存放目录</span></span><br></pre></td></tr></table></figure>
<h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><p><a href="https://www.bluez.org/">BlueZ</a> <a href="https://tiswww.case.edu/php/chet/readline/rltop.html">Readline</a> <a href="https://invisible-island.net/ncurses/announce.html">Ncurses</a> <a href="https://www.freedesktop.org/wiki/Software/dbus/">D-Bus</a> <a href="https://libexpat.github.io/">Expat</a> <a href="https://docs.gtk.org/glib/">Glib</a> <a href="https://zlib.net/">Zlib</a> <a href="https://sourceware.org/libffi/">libffi</a> <a href="https://www.gnu.org/software/gettext/">gettext</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> bluez-cross-complier/download/</span><br><span class="line">wget http://www.kernel.org/pub/linux/bluetooth/bluez-5.66.tar.xz</span><br><span class="line">wget ftp://ftp.cwru.edu/pub/bash/readline-8.2.tar.gz</span><br><span class="line">wget https://ftp.gnu.org/gnu/ncurses/ncurses-6.4.tar.gz</span><br><span class="line">wget https://dbus.freedesktop.org/releases/dbus/dbus-1.15.0.tar.xz</span><br><span class="line">wget https://github.com/libexpat/libexpat/releases/download/R_2_6_2/expat-2.6.2.tar.gz</span><br><span class="line">wget https://download.gnome.org/sources/glib/2.46/glib-2.46.2.tar.xz</span><br><span class="line">wget https://zlib.net/zlib-1.3.1.tar.gz</span><br><span class="line">wget https://github.com/libffi/libffi/releases/download/v3.4.5/libffi-3.4.5.tar.gz</span><br><span class="line">wget https://ftp.gnu.org/pub/gnu/gettext/gettext-0.22.5.tar.gz</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ./*.tar.*; <span class="keyword">do</span> tar -xvf <span class="string">&quot;<span class="variable">$i</span>&quot;</span> -C ./../source-code/; <span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h3 id="最终的目录结构为"><a href="#最终的目录结构为" class="headerlink" title="最终的目录结构为"></a>最终的目录结构为</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bluez-cross-complier/</span><br><span class="line">├── download</span><br><span class="line">│   ├── bluez-5.66.tar.xz</span><br><span class="line">│   ├── dbus-1.15.0.tar.xz</span><br><span class="line">│   ├── expat-2.6.2.tar.gz</span><br><span class="line">│   ├── gettext-0.22.5.tar.gz</span><br><span class="line">│   ├── glib-2.46.2.tar.xz</span><br><span class="line">│   ├── libffi-3.4.5.tar.gz</span><br><span class="line">│   ├── ncurses-6.4.tar.gz</span><br><span class="line">│   ├── readline-8.2.tar.gz</span><br><span class="line">│   └── zlib-1.3.1.tar.gz</span><br><span class="line">├── output</span><br><span class="line">└── source-code</span><br><span class="line">    ├── bluez-5.66</span><br><span class="line">    ├── dbus-1.15.0</span><br><span class="line">    ├── expat-2.6.2</span><br><span class="line">    ├── gettext-0.22.5</span><br><span class="line">    ├── glib-2.46.2</span><br><span class="line">    ├── libffi-3.4.5</span><br><span class="line">    ├── ncurses-6.4</span><br><span class="line">    ├── readline-8.2</span><br><span class="line">    └── zlib-1.3.1</span><br></pre></td></tr></table></figure>
<h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><p><em>为了方便后面编译时直接使用</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> bluez_output=/home/kaikai/hl_project/bluez-cross-complier/mstar-output</span><br><span class="line"><span class="built_in">export</span> bluez_cc=arm-sigmastar-linux-uclibcgnueabihf-gcc</span><br><span class="line"><span class="built_in">export</span> bluez_cxx=arm-sigmastar-linux-uclibcgnueabihf-g++</span><br><span class="line"><span class="built_in">export</span> bluez_host=arm-sigmastar-linux-uclibcgnueabihf</span><br></pre></td></tr></table></figure>
<h2 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h2><h3 id="Readline交叉编译"><a href="#Readline交叉编译" class="headerlink" title="Readline交叉编译"></a>Readline交叉编译</h3><p><em>注意：如果是用的6.5版本的ncures,生成的库名是libncursesw.a</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> source-code/readline-8.2/</span><br><span class="line">./configure --prefix=<span class="variable">$bluez_output</span> CC=<span class="variable">$bluez_cc</span> CXX=<span class="variable">$bluez_cxx</span> --host=<span class="variable">$bluez_host</span> CFLAGS=<span class="string">&quot;-fPIC&quot;</span></span><br><span class="line">make -j8 &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<ul>
<li><em>CFLAGS&#x3D;”-fPIC” : 为了后面方便连接静态库</em></li>
</ul>
<h3 id="ncurses交叉编译"><a href="#ncurses交叉编译" class="headerlink" title="ncurses交叉编译"></a>ncurses交叉编译</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> source-code/ncurses-6.4/</span><br><span class="line">./configure --prefix=<span class="variable">$bluez_output</span> CC=<span class="variable">$bluez_cc</span> CXX=<span class="variable">$bluez_cxx</span> --host=<span class="variable">$bluez_host</span> --with-shared</span><br><span class="line">make -j8 &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<ul>
<li><em>–with-shared  默认生成静态库，加这个参数同时生成静态库和动态库</em></li>
</ul>
<h3 id="glib-2-46-2编译前准备"><a href="#glib-2-46-2编译前准备" class="headerlink" title="glib-2.46.2编译前准备"></a>glib-2.46.2编译前准备</h3><p><em>在正式编译glib之前需要提前编译依赖库</em></p>
<h4 id="gettext交叉编译"><a href="#gettext交叉编译" class="headerlink" title="gettext交叉编译"></a>gettext交叉编译</h4><p><em>解决：You must have either have gettext support in your C library, or use the GNU gettext library.</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> source-code/gettext-0.22.5/</span><br><span class="line">./configure --prefix=<span class="variable">$bluez_output</span> CC=<span class="variable">$bluez_cc</span> CXX=<span class="variable">$bluez_cxx</span> --host=<span class="variable">$bluez_host</span> CFLAGS=<span class="string">&quot;-fPIC&quot;</span></span><br><span class="line">make -j8 &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h4 id="编译libffi"><a href="#编译libffi" class="headerlink" title="编译libffi"></a>编译libffi</h4><p><em>解决： gclosure.c:28:10: fatal error: ffi.h: No such file or directory</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> source-code/libffi-3.4.5</span><br><span class="line">./configure --prefix=<span class="variable">$bluez_output</span> CC=<span class="variable">$bluez_cc</span> CXX=<span class="variable">$bluez_cxx</span> --host=<span class="variable">$bluez_host</span> CFLAGS=<span class="string">&quot;-fPIC&quot;</span></span><br><span class="line">make -j8 &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h4 id="编译zlib"><a href="#编译zlib" class="headerlink" title="编译zlib"></a>编译zlib</h4><p><em>解决：gzlibcompressor.c:26:10: fatal error: zlib.h: No such file or directory</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> source-code/zlib-1.3.1/</span><br><span class="line">./configure --prefix=<span class="variable">$bluez_output</span></span><br></pre></td></tr></table></figure>
<p><em>由于zlib的auto configure不支持命令行修改编译链，所以需要手动修改makefile</em></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">CC=arm-sigmastar-linux-uclibcgnueabihf-gcc</span><br><span class="line">CFLAGS=-O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN -fPIC</span><br><span class="line">LDSHARED=arm-sigmastar-linux-uclibcgnueabihf-gcc -shared -Wl,-soname,libz.so.1,--version-script,zlib.map</span><br><span class="line">CPP=arm-sigmastar-linux-uclibcgnueabihf-gcc -E</span><br><span class="line">AR=arm-sigmastar-linux-uclibcgnueabihf-ar</span><br><span class="line">RANLIB=arm-sigmastar-linux-uclibcgnueabihf-ranlib</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j8 &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h4 id="增加arm-linux-cache"><a href="#增加arm-linux-cache" class="headerlink" title="增加arm-linux.cache"></a>增加arm-linux.cache</h4><p><em>解决：configure: error: cannot run test program while cross compiling</em> <a href="https://blog.csdn.net/junlon2006/article/details/82773450">参考连接</a><br><code>vim glib-2.46.2/arm-linux.cache</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编译链不同，检查的内容也不通</span></span><br><span class="line">glib_cv_stack_grows=no</span><br><span class="line">glib_cv_uscore=no</span><br><span class="line">ac_cv_func_posix_getpwuid_r=<span class="built_in">yes</span></span><br><span class="line">ac_cv_func_posix_getgrgid_r=no</span><br></pre></td></tr></table></figure>
<h4 id="修改源码"><a href="#修改源码" class="headerlink" title="修改源码"></a>修改源码</h4><p><em>可选项：这是代码编译过程中警告被当作错误处理，如果不想修改源码，可使用-Wno-error参数忽略指定错误</em></p>
<ul>
<li>gdate.c:2497:7<br><em>解决：gdate.c:2497:7: error: format not a string literal, format string not checked [-Werror&#x3D;format-nonliteral]</em><br>添加下面的代码到<code>gdate.c</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma GCC diagnostic ignored &quot;-Wformat-nonliteral&quot;</span><br></pre></td></tr></table></figure></li>
<li>gdbusauth.c<br><em>解决：gdbusauth.c:1295:11: error: ‘%s’ directive argument is null [-Werror&#x3D;format-overflow&#x3D;]<br>gdbusmessage.c:2698:30: error: ‘%s’ directive argument is null [-Werror&#x3D;format-overflow&#x3D;]</em><br>参考<a href="https://blog.csdn.net/colarLemon/article/details/121069867">gdbusauth.c:1302:11: error: ‘%s’ directive argument is null</a></li>
</ul>
<h3 id="正式编译glib-2-46-2"><a href="#正式编译glib-2-46-2" class="headerlink" title="正式编译glib-2.46.2"></a>正式编译glib-2.46.2</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> source-code/glib-2.46.2/</span><br><span class="line">./configure --prefix=<span class="variable">$bluez_output</span> CC=<span class="variable">$bluez_cc</span> --host=<span class="variable">$bluez_host</span> CPPFLAGS=<span class="string">&quot;-I<span class="variable">$bluez_output</span>/include&quot;</span> LDFLAGS=<span class="string">&quot;-L<span class="variable">$bluez_output</span>/lib&quot;</span>  --cache-file=arm-linux.cache --enable-static </span><br><span class="line">make CFLAGS=<span class="string">&quot;-Wno-error=format-nonliteral&quot;</span> ZLIB_LIBS=-l:libz.a LIBFFI_LIBS=<span class="string">&quot;-l:libffi.a&quot;</span> -j8</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<ul>
<li><code>configure</code> 编译添加 <code>ZLIB_LIBS=-l:libz.a LIBFFI_LIBS=-l:libffi.a</code>链接静态库</li>
<li>–enable-static 编译同时生成静态库</li>
</ul>
<h3 id="编译D-Bus"><a href="#编译D-Bus" class="headerlink" title="编译D-Bus"></a>编译D-Bus</h3><h4 id="编译expat-2-6-2"><a href="#编译expat-2-6-2" class="headerlink" title="编译expat-2.6.2"></a>编译expat-2.6.2</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> source-code/expat-2.6.2/</span><br><span class="line">sudo apt-get install -y docbook2x</span><br><span class="line">./configure --prefix=<span class="variable">$bluez_output</span> CC=<span class="variable">$bluez_cc</span> CXX=<span class="variable">$bluez_cxx</span> --host=<span class="variable">$bluez_host</span> CFLAGS=<span class="string">&quot;-fPIC&quot;</span></span><br><span class="line">make -j8 &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h4 id="编译D-Bus-1"><a href="#编译D-Bus-1" class="headerlink" title="编译D-Bus"></a>编译D-Bus</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> source-code/dbus-1.15.0/</span><br><span class="line">./configure --prefix=<span class="variable">$bluez_output</span> CC=<span class="variable">$bluez_cc</span> CXX=<span class="variable">$bluez_cxx</span> --host=<span class="variable">$bluez_host</span> CFLAGS=<span class="string">&quot;-fPIC&quot;</span> CPPFLAGS=<span class="string">&quot;-I<span class="variable">$bluez_output</span>/include&quot;</span> LDFLAGS=<span class="string">&quot;-L<span class="variable">$bluez_output</span>/lib&quot;</span> --with-dbus-user=root --with-system-socket=/tmp/system_bus_socket --with-system-pid-file=/tmp/messagebus.pid --enable-selinux=no --without-x</span><br><span class="line">make EXPAT_LIBS=<span class="string">&quot;-l:libexpat.a&quot;</span> LIBS=<span class="string">&quot;-l:libz.a -l:libffi.a -l:libintl.a&quot;</span> GLIB_LIBS=<span class="string">&quot;-l:libgio-2.0.a -l:libgmodule-2.0.a -l:libgobject-2.0.a -l:libglib-2.0.a&quot;</span> -j8</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<ul>
<li>–with-dbus-user&#x3D;root –with-system-socket&#x3D;&#x2F;tmp&#x2F;system_bus_socket –with-system-pid-file&#x3D;&#x2F;tmp&#x2F;messagebus.pid：如何你的目标开发板文件系统是只读的建议加这几个参数</li>
</ul>
<h3 id="编译BlueZ"><a href="#编译BlueZ" class="headerlink" title="编译BlueZ"></a>编译BlueZ</h3><h4 id="静态链接readline-glib-d-bus"><a href="#静态链接readline-glib-d-bus" class="headerlink" title="静态链接readline&#x2F;glib&#x2F;d-bus"></a>静态链接readline&#x2F;glib&#x2F;d-bus</h4><p><em>glib&#x2F;d-bus: GLIB_LIBS&#x3D;”-l:libglib-2.0.a” DBUS_LIBS&#x3D;”-l:libdbus-1.a”</em><br><em>readline: 生成makefile后将makefile里的-lreadline替换为-l:libreadline.a</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> source-code/bluez-5.66/</span><br><span class="line">./configure --prefix=<span class="variable">$bluez_output</span> CC=<span class="variable">$bluez_cc</span> CXX=<span class="variable">$bluez_cxx</span> --host=<span class="variable">$bluez_host</span> CFLAGS=<span class="string">&quot;-fPIC&quot;</span> CPPFLAGS=<span class="string">&quot;-I<span class="variable">$bluez_output</span>/include&quot;</span> LDFLAGS=<span class="string">&quot;-L<span class="variable">$bluez_output</span>/lib&quot;</span> --enable-btpclient --disable-systemd --disable-udev --disable-cups --disable-obex --enable-library --enable-deprecated --localstatedir=/tmp --disable-bap --disable-mcp --disable-vcp</span><br><span class="line">make GLIB_LIBS=<span class="string">&quot;-l:libglib-2.0.a&quot;</span> DBUS_LIBS=<span class="string">&quot;-l:libdbus-1.a&quot;</span> LIBS=<span class="string">&quot;-l:libintl.a -l:libreadline.a -l:libncurses.a&quot;</span> -j8</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<ul>
<li>–enable-deprecated: 编译hciconfig、hcitool、hcidump、hciattach</li>
<li>–enable-btpclient：编译btpclient</li>
<li>–localstatedir&#x3D;&#x2F;tmp: bluetoothd运行会创建文件保存信息，确保路径可读写<br>以上，至此Bluez交叉编译完成。</li>
</ul>
<h2 id="移植到目标开发板"><a href="#移植到目标开发板" class="headerlink" title="移植到目标开发板"></a>移植到目标开发板</h2><h3 id="hci工具"><a href="#hci工具" class="headerlink" title="hci工具"></a>hci工具</h3><p><em>生成路径：$bluez_output&#x2F;bin</em><br>hciconfig、hcitool、hcidump、hciattach这4个工具可以独立使用，如果编译链接了readline和ncurses的静态库</p>
<h3 id="dbus"><a href="#dbus" class="headerlink" title="dbus"></a>dbus</h3><p><em>dbus-daemon生成路径：$bluez_output&#x2F;bin</em><br><em>dbus-daemon conf路径：$bluez_output&#x2F;share&#x2F;dbus-1</em><br><em>libdbus-1.so.3路径：$bluez_output&#x2F;lib</em></p>
<h3 id="bluetoothd-bluetoothctl"><a href="#bluetoothd-bluetoothctl" class="headerlink" title="bluetoothd&#x2F;bluetoothctl"></a>bluetoothd&#x2F;bluetoothctl</h3><p><em>bluetoothd生成路径：$bluez_output&#x2F;libexec&#x2F;bluetooth</em><br><em>bluetoothctl生成路径：$bluez_output&#x2F;bin</em><br><em>配置文件路径：bluez源码，src&#x2F;bluetooth.conf</em><br><em>libreadline.so.8路径：$bluez_output&#x2F;lib</em><br>将<code>bluetooth.confbluetooth.conf</code>复制到<code>share/dbus-1/system.d/</code>目录下</p>
<h3 id="最后移植的内容如下"><a href="#最后移植的内容如下" class="headerlink" title="最后移植的内容如下"></a>最后移植的内容如下</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── bin</span><br><span class="line">│   ├── bluetoothctl</span><br><span class="line">│   ├── bluetoothd</span><br><span class="line">│   ├── dbus-daemon</span><br><span class="line">│   ├── hciattach</span><br><span class="line">│   ├── hciconfig</span><br><span class="line">│   ├── hcidump</span><br><span class="line">│   └── hcitool</span><br><span class="line">├── lib</span><br><span class="line">│   ├── libdbus-1.so</span><br><span class="line">│   ├── libdbus-1.so.3</span><br><span class="line">│   ├── libdbus-1.so.3.34.0</span><br><span class="line">│   ├── libreadline.so</span><br><span class="line">│   ├── libreadline.so.8</span><br><span class="line">│   └── libreadline.so.8.2</span><br><span class="line">└── share</span><br><span class="line">    └── dbus-1</span><br><span class="line">        ├── services</span><br><span class="line">        ├── session.conf</span><br><span class="line">        ├── session.d</span><br><span class="line">        ├── system.conf</span><br><span class="line">        ├── system.d</span><br><span class="line">        │   └── bluetooth.conf</span><br><span class="line">        └── system-services</span><br></pre></td></tr></table></figure>
<h3 id="bluez运行"><a href="#bluez运行" class="headerlink" title="bluez运行"></a>bluez运行</h3><h4 id="运行bluetoothd"><a href="#运行bluetoothd" class="headerlink" title="运行bluetoothd"></a>运行bluetoothd</h4><p><em>下面的操作是将程序和库放到SD卡里使用</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">&#x27;/system/lib:/mnt/sdcard/bluez-5.66/lib&#x27;</span></span><br><span class="line">./dbus-daemon --config-file=/mnt/sdcard/bluez-5.66/share/dbus-1/system.conf</span><br><span class="line">./bluetoothd -n -C &amp;</span><br></pre></td></tr></table></figure>
<h4 id="测试bluetoothctl"><a href="#测试bluetoothctl" class="headerlink" title="测试bluetoothctl"></a>测试bluetoothctl</h4><p><code>./bluetoothctl</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Agent registered        uetoothd...</span><br><span class="line">[CHG] Controller EB:BF:AD:FC:FD:FE Pairable: <span class="built_in">yes</span></span><br><span class="line">[bluetooth]<span class="comment"># help</span></span><br><span class="line">Menu main:</span><br><span class="line">Available commands:</span><br><span class="line">-------------------</span><br><span class="line">advertise                                         Advertise Options Submenu</span><br><span class="line">monitor                                           Advertisement Monitor Options Submenu</span><br><span class="line">scan                                              Scan Options Submenu</span><br><span class="line">gatt                                              Generic Attribute Submenu</span><br><span class="line">admin                                             Admin Policy Submenu</span><br><span class="line">player                                            Media Player Submenu</span><br><span class="line">endpoint                                          Media Endpoint Submenu</span><br><span class="line">transport                                         Media Transport Submenu</span><br><span class="line">list                                              List available controllers</span><br><span class="line">show [ctrl]                                       Controller information</span><br><span class="line"><span class="keyword">select</span> &lt;ctrl&gt;                                     Select default controller</span><br><span class="line">devices [Paired/Bonded/Trusted/Connected]         List available devices, with an optional property as the filter</span><br><span class="line">system-alias &lt;name&gt;                               Set controller <span class="built_in">alias</span></span><br><span class="line">reset-alias                                       Reset controller <span class="built_in">alias</span></span><br><span class="line">power &lt;on/off&gt;                                    Set controller power</span><br><span class="line">pairable &lt;on/off&gt;                                 Set controller pairable mode</span><br><span class="line">discoverable &lt;on/off&gt;                             Set controller discoverable mode</span><br><span class="line">discoverable-timeout [value]                      Set discoverable <span class="built_in">timeout</span></span><br><span class="line">agent &lt;on/off/capability&gt;                         Enable/disable agent with given capability</span><br><span class="line">default-agent                                     Set agent as the default one</span><br><span class="line">advertise &lt;on/off/type&gt;                           Enable/disable advertising with given <span class="built_in">type</span></span><br><span class="line">set-alias &lt;<span class="built_in">alias</span>&gt;                                 Set device <span class="built_in">alias</span></span><br><span class="line">scan &lt;on/off/bredr/le&gt;                            Scan <span class="keyword">for</span> devices</span><br><span class="line">info [dev]                                        Device information</span><br><span class="line">pair [dev]                                        Pair with device</span><br><span class="line">cancel-pairing [dev]                              Cancel pairing with device</span><br><span class="line">trust [dev]                                       Trust device</span><br><span class="line">untrust [dev]                                     Untrust device</span><br><span class="line">block [dev]                                       Block device</span><br><span class="line">unblock [dev]                                     Unblock device</span><br><span class="line">remove &lt;dev&gt;                                      Remove device</span><br><span class="line">connect &lt;dev&gt;                                     Connect device</span><br><span class="line">disconnect [dev]                                  Disconnect device</span><br><span class="line">menu &lt;name&gt;                                       Select submenu</span><br><span class="line">version                                           Display version</span><br><span class="line">quit                                              Quit program</span><br><span class="line"><span class="built_in">exit</span>                                              Quit program</span><br><span class="line"><span class="built_in">help</span>                                              Display <span class="built_in">help</span> about this program</span><br><span class="line"><span class="built_in">export</span>                                            Print environment variables</span><br><span class="line">[bluetooth]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h2 id="bluetoothd-bluetoothctl使用过程中遇到的其他问题"><a href="#bluetoothd-bluetoothctl使用过程中遇到的其他问题" class="headerlink" title="bluetoothd&#x2F;bluetoothctl使用过程中遇到的其他问题"></a>bluetoothd&#x2F;bluetoothctl使用过程中遇到的其他问题</h2><h3 id="bluetoothd启动后没有报错直接退出"><a href="#bluetoothd启动后没有报错直接退出" class="headerlink" title="bluetoothd启动后没有报错直接退出"></a>bluetoothd启动后没有报错直接退出</h3><p>内核没有开启<code>CONFIG_SIGNALFD</code>配置，导致不支持signalfd函数，内核开启该配置即可。</p>
<h4 id="原因bluez源码此处报错直接返回了，没有打印错误信息"><a href="#原因bluez源码此处报错直接返回了，没有打印错误信息" class="headerlink" title="原因bluez源码此处报错直接返回了，没有打印错误信息"></a>原因bluez源码此处报错直接返回了，没有打印错误信息</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">struct</span> io *<span class="title function_">setup_signalfd</span><span class="params">(<span class="type">void</span> *user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">io</span> *<span class="title">io</span>;</span></span><br><span class="line">	<span class="type">sigset_t</span> mask;</span><br><span class="line">	<span class="type">int</span> fd;</span><br><span class="line"></span><br><span class="line">	sigemptyset(&amp;mask);</span><br><span class="line">	sigaddset(&amp;mask, SIGINT);</span><br><span class="line">	sigaddset(&amp;mask, SIGTERM);</span><br><span class="line">	sigaddset(&amp;mask, SIGUSR2);</span><br><span class="line">	sigaddset(&amp;mask, SIGCHLD);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (sigprocmask(SIG_BLOCK, &amp;mask, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	fd = signalfd(<span class="number">-1</span>, &amp;mask, SFD_NONBLOCK | SFD_CLOEXEC);</span><br><span class="line">	<span class="keyword">if</span> (fd &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	io = io_new(fd);</span><br><span class="line"></span><br><span class="line">	io_set_close_on_destroy(io, <span class="literal">true</span>);</span><br><span class="line">	io_set_read_handler(io, signal_read, user_data, <span class="built_in">free</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> io;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="测试demo"><a href="#测试demo" class="headerlink" title="测试demo"></a>测试demo</h4><p><em>编译后在板子里执行如果报错Function not implemented，在内核开启signalfd配置即可</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/signalfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">sigset_t</span> mask;</span><br><span class="line">    <span class="type">int</span> sfd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">signalfd_siginfo</span> <span class="title">fdsi</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化信号集</span></span><br><span class="line">    sigemptyset(&amp;mask);</span><br><span class="line">    sigaddset(&amp;mask, SIGINT);  <span class="comment">// 添加 SIGINT 到信号集</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 signalfd</span></span><br><span class="line">    sfd = signalfd(<span class="number">-1</span>, &amp;mask, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (sfd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;signalfd&quot;</span>); <span class="comment">//此处报错Function not implemented</span></span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取信号</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">ssize_t</span> s = read(sfd, &amp;fdsi, <span class="keyword">sizeof</span>(fdsi));</span><br><span class="line">        <span class="keyword">if</span> (s != <span class="keyword">sizeof</span>(fdsi)) &#123;</span><br><span class="line">            perror(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fdsi.ssi_signo == SIGINT) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Received SIGINT\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭文件描述符</span></span><br><span class="line">    close(sfd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="bluetoothctl报错"><a href="#bluetoothctl报错" class="headerlink" title="bluetoothctl报错"></a>bluetoothctl报错</h3><h4 id="Failed-to-start-discovery-org-bluez-Error-NotReady"><a href="#Failed-to-start-discovery-org-bluez-Error-NotReady" class="headerlink" title="Failed to start discovery: org.bluez.Error.NotReady"></a>Failed to start discovery: org.bluez.Error.NotReady</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[bluetooth]<span class="comment"># scan on</span></span><br><span class="line">Failed to start discovery: org.bluez.Error.NotReady</span><br><span class="line">[bluetooth]<span class="comment"># power on</span></span><br><span class="line">Changing power on succeeded</span><br><span class="line">[CHG] Controller EB:BF:AD:FC:FD:FE Powered: <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>
<h4 id="Failed-to-start-discovery-org-bluez-Error-InProgress"><a href="#Failed-to-start-discovery-org-bluez-Error-InProgress" class="headerlink" title="Failed to start discovery: org.bluez.Error.InProgress"></a>Failed to start discovery: org.bluez.Error.InProgress</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[bluetooth]<span class="comment"># scan on</span></span><br><span class="line">Failed to start discovery: org.bluez.Error.InProgress</span><br></pre></td></tr></table></figure>
<ul>
<li>网上搜到类似问题 ，但是无法解决我遇到的问题 <a href="https://www.cnblogs.com/wanglouxiaozi/p/17782573.html">网上类似问题</a></li>
<li>hcitool可以scan，通过对比二者的hcilog，发现hcitool使用的基础指令，bluetoothd使用的是extened指令集，解决方案需要蓝牙芯片厂商给controller开启extened指令集<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bluetoothd/bluetoothctl使用</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BT_HCI_CMD_LE_SET_EXT_SCAN_PARAMS		0x2041</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bt_hci_cmd_le_set_ext_scan_params</span> &#123;</span></span><br><span class="line">	<span class="type">uint8_t</span>  own_addr_type;</span><br><span class="line">	<span class="type">uint8_t</span>  filter_policy;</span><br><span class="line">	<span class="type">uint8_t</span>  num_phys;</span><br><span class="line">	<span class="type">uint8_t</span>  data[<span class="number">0</span>];</span><br><span class="line">&#125; __attribute__ ((packed));</span><br><span class="line"></span><br><span class="line"><span class="comment">//hcitool使用</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BT_HCI_CMD_LE_SET_SCAN_PARAMETERS	0x200b</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bt_hci_cmd_le_set_scan_parameters</span> &#123;</span></span><br><span class="line">	<span class="type">uint8_t</span>  type;</span><br><span class="line">	<span class="type">uint16_t</span> interval;</span><br><span class="line">	<span class="type">uint16_t</span> window;</span><br><span class="line">	<span class="type">uint8_t</span>  own_addr_type;</span><br><span class="line">	<span class="type">uint8_t</span>  filter_policy;</span><br><span class="line">&#125; __attribute__ ((packed));</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
        <category>交叉编译</category>
      </categories>
      <tags>
        <tag>arm</tag>
        <tag>bluez</tag>
      </tags>
  </entry>
</search>
